/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Bee from '../model/Bee';

/**
* Bee service.
* @module api/BeeApi
* @version 1.0.0
*/
export default class BeeApi {

    /**
    * Constructs a new BeeApi. 
    * @alias module:api/BeeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createbee operation.
     * @callback module:api/BeeApi~createbeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Bee} bee data to be created
     * @param {module:api/BeeApi~createbeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bee}
     */
    createbee(bee, callback) {
      let postBody = bee;
      // verify the required parameter 'bee' is set
      if (bee === undefined || bee === null) {
        throw new Error("Missing the required parameter 'bee' when calling createbee");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Bee;
      return this.apiClient.callApi(
        '/bee', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletebee operation.
     * @callback module:api/BeeApi~deletebeeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} beeId the Id parameter
     * @param {module:api/BeeApi~deletebeeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletebee(beeId, callback) {
      let postBody = null;
      // verify the required parameter 'beeId' is set
      if (beeId === undefined || beeId === null) {
        throw new Error("Missing the required parameter 'beeId' when calling deletebee");
      }

      let pathParams = {
        'beeId': beeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bee/{beeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllbee operation.
     * @callback module:api/BeeApi~getAllbeeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Bee>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/BeeApi~getAllbeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Bee>}
     */
    getAllbee(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Bee];
      return this.apiClient.callApi(
        '/bee/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsbee operation.
     * @callback module:api/BeeApi~getByParamsbeeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Bee>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/BeeApi~getByParamsbeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Bee>}
     */
    getByParamsbee(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsbee");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Bee];
      return this.apiClient.callApi(
        '/bee/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getbee operation.
     * @callback module:api/BeeApi~getbeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} beeId the Id parameter
     * @param {module:api/BeeApi~getbeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bee}
     */
    getbee(beeId, callback) {
      let postBody = null;
      // verify the required parameter 'beeId' is set
      if (beeId === undefined || beeId === null) {
        throw new Error("Missing the required parameter 'beeId' when calling getbee");
      }

      let pathParams = {
        'beeId': beeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bee;
      return this.apiClient.callApi(
        '/bee/{beeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatebee operation.
     * @callback module:api/BeeApi~updatebeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} beeId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Bee} opts.bee data to be updated
     * @param {module:api/BeeApi~updatebeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bee}
     */
    updatebee(beeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['bee'];
      // verify the required parameter 'beeId' is set
      if (beeId === undefined || beeId === null) {
        throw new Error("Missing the required parameter 'beeId' when calling updatebee");
      }

      let pathParams = {
        'beeId': beeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Bee;
      return this.apiClient.callApi(
        '/bee/{beeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
